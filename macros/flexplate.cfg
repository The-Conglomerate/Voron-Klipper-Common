#####################################################################
#  Source
#####################################################################
##
## https://github.com/zellneralex/klipper_config/blob/master/flexplate.cfg
##
#####################################################################
#  Preperation
#####################################################################
## copy this file in the same directory as your printer.cfg
## add
##    [include flexplate.cfg]
## to your printer.cfg
##
## A [save_variables] block is needed since a printer save variable needs to be used to have it available after power up.
## You can skip this if you already have an [save_variables] config block
## e.g:
##    [save_variables]
##    filename: /home/pi/klipper_config/.variables.stb
## I like to hide that file as there is nothing in that should be modified by the user.
## Do a klipper restart after adding the stuff above
##
## After klipper is back type
##     _INIT_PLATE_ARRAY
## in the console to initial the needed variables
## Thats all you need to do for the initial setup
##
#####################################################################
#  Normal usage Console
#####################################################################
## Init Array                : _INIT_PLATE_ARRAY (one time action)
## List all plates           : LIST_PLATES
## Change act Plate          : SET_PLATE INDEX=0 (any index number)
## Add New Plate             : ADD_NEW_PLATE
## Remove active Plate       : REMOVE_PLATE
## Change offset of act Plate: CHANGE_PLATE_OFFSET OFFSET=0.001 (any new offset)
## Change name of act Plate  : CHANGE_PLATE_NAME Name=test (any new name)
##
#####################################################################
#  Get offset_z and name for own usage
#####################################################################
## use:
##   {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
##   {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
## to get the needed parameter of the active plate
##
#####################################################################
#  Macros
#####################################################################
[gcode_macro TOGGLE_FLEXPLATE]
description: Toggle the flexplate on and off. [save_variables] is required.
gcode:
	{% set ena_flexplate = printer.save_variables.variables.flexplate|default("false")|lower %}
	{% if ena_flexplate == "false" %}
		RESPOND MSG="flexplate is off, turning it on"
		SAVE_VARIABLE VARIABLE=flexplate VALUE='"true"'
	{% else %}
		RESPOND MSG="flexplate is on, turning it off"
		SAVE_VARIABLE VARIABLE=flexplate VALUE='"false"'
	{% endif %}

## Initial plate offset at klipper start
[delayed_gcode DELAY_INIT_PLATE]
initial_duration: 6.
gcode:
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    {% set ena_auto_z_offset = printer["gcode_macro _COMMON_VARIABLE"].auto_z_offset|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info("==== DELAY_INIT_PLATE ====")}
        {action_respond_info("ena_auto_z_offset: '%s'" % (ena_auto_z_offset))}
        {action_respond_info("===============")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run  _INIT_PLATE_ARRAY"
    {% else %}
    {% if ena_auto_z_offset == "flexplate" %}
        _DISPLAY_PLATE TEXT="Init"
        _SET_PLATE_OFFSET MOVE=0
    {% endif %}
    {% endif %}

# execute gcode offset of the actual plate
# !!! old offsets will get zeroed !!!
# usage: _SET_PLATE_OFFSET MOVE=[0|1]
[gcode_macro _SET_PLATE_OFFSET]
description: Helper: Apply the z-offset of the active flexplate
gcode:
    # command params
    {% set move = params.MOVE|default(1)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    {% set ena_auto_z_offset = printer["gcode_macro _COMMON_VARIABLE"].auto_z_offset|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _SET_PLATE_OFFSET ====")}
        {action_respond_info("features [auto_z_offset: '%s']" % (ena_auto_z_offset))}
        {action_respond_info("move: '%s'" % (move))}
        {action_respond_info("===============")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
    RESPOND MSG="FLEXPLATE:No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
    {% if ena_auto_z_offset == "flexplate" %}
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set index = printer.save_variables.variables.plate_index|int %}
    {% set plate_offset_z = plates[index][1] %}
    SET_GCODE_OFFSET Z=0
    {% if move == "true" %}
        SET_GCODE_OFFSET Z_ADJUST={plate_offset_z|float} MOVE={move}
    {% else %}
        SET_GCODE_OFFSET Z_ADJUST={plate_offset_z|float}
    {% endif %}
    {% endif %}
    {% endif %}

# shows active plate and offset in console and display
# usage: _DISPLAY_PLATE TEXT=<Set>
[gcode_macro _DISPLAY_PLATE]
description: Helper: Print active flexplate values
gcode:
    # command params
    {% set text = params.TEXT|default("Used") %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set plates = printer.save_variables.variables.plate_array %}
    {% set index = printer.save_variables.variables.plate_index|int %}
    {% set plate_offset_z = plates[index][1] %}
    {% set plate_name = plates[index][0] %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _DISPLAY_PLATE ====")}
        {action_respond_info("text: '%s'" % (text))}
        {action_respond_info("plates: '%s'" % (plates))}
        {action_respond_info("index: '%s'" % (index))}
        {action_respond_info("plate: [offset_z: '%s',name: '%s']" % (plate_offset_z,plate_name))}
        {action_respond_info("===============")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {action_respond_info("%s Plate: %s --> set z_offset: %01.3fmm" % (text, plate_name|string,plate_offset_z|float))}
    {% endif %}

# initial array this is only working as long the variables are not existing
# this is done to help users at the install
# usage: _INIT_PLATE_ARRAY
[gcode_macro _INIT_PLATE_ARRAY]
description: Initialize flexplate array
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _INIT_PLATE_ARRAY ====")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        {% set array = namespace(output = "") %}
        # klipper can not store arrays elements so we need to do a string manipulation
        # add first element
        {% set element = "[('First', 0.0)]" %}
        {% set array.output = array.output +  element %}
        SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
        SAVE_VARIABLE VARIABLE=plate_index VALUE=0
    {% else %}
        RESPOND MSG="FLEXPLATE: Plate array already exists. ABORTED"
    {% endif %}

# list all plates
# usage: LIST_PLATES
[gcode_macro LIST_PLATES]
description: Print all flexplates
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== LIST_PLATES ====")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {% set array = namespace(output = "") %}
        {% set plates = printer.save_variables.variables.plate_array %}
        {% set elem_count = plates|length %}
        {% set act_index = printer.save_variables.variables.plate_index|int %}
        {% set element = "Defined Plates:" %}
        {% set array.output = array.output + element + "\n"%}
        {% for index in range(elem_count) %}
            {% set element = "%-10s -> Offset: %01.3fmm -> Index: %-2d" % (plates[index][0], plates[index][1], index) %}
            {% set array.output = array.output + element + "\n"%}
        {% endfor %}
        {% set element = "Active Plate: %s" % (plates[act_index][0]) %}
        {% set array.output = array.output + "\n" + element + "\n"%}
        {action_respond_info("%s" % (array.output))}
    {% endif %}

# set active plate by index
# usage: SET_PLATE INDEX=0
[gcode_macro SET_PLATE]
description: Set an flexplate
gcode:
    # command params
    {% set index = params.INDEX|default(0)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== SET_PLATE ====")}
        {action_respond_info("index: '%s'" % (index))}
        {action_respond_info("===============")}
    {% endif %}

    # set default parameter value
    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {% set plates = printer.save_variables.variables.plate_array %}
        {% set elem_count = plates|length %}
        # check INDEX in range
        {% if (index|int >= 0) and (index|int <= (elem_count-1)) %}
            SAVE_VARIABLE VARIABLE=plate_index VALUE={index|int}
            _DISPLAY_PLATE TEXT="Set"
            # check if printer is homed
            {% if "xyz" in printer.toolhead.homed_axes %}
            _SET_PLATE_OFFSET DEBUG={debug}
            {% else %}
            RESPOND MSG="Offset will be appied with the next move"
            _SET_PLATE_OFFSET MOVE=0 DEBUG={debug}
            {% endif %}
        {% else %}
            RESPOND MSG="FLEXPLATE: Index out of range. ABORTED"
        {% endif %}
    {% endif %}

# add a new plate to the array
# usage: ADD_NEW_PLATE
[gcode_macro ADD_NEW_PLATE]
description: Add a new flexplate to the array
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== ADD_NEW_PLATE ====")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {% set array = namespace(output = "") %}
        {% set plates = printer.save_variables.variables.plate_array %}
        {% set elem_count = plates|length %}
        # klipper can not store arrays elements so we need to do a string manipulation
        {% for index in range(elem_count) %}
            {% set element = "('%s', %s), " % (plates[index][0], plates[index][1]) %}
            {% set array.output = array.output + element %}
        {% endfor %}
        # add new element
        {% set element = "('New', 0.0)" %}
        {% set array.output = array.output + element %}
        # add array boarders
        {% set array.output = "[%s]"% (array.output) %}
        SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
    {% endif %}

# remove the active plate from array
# !!! Active Plate will change to first plate
# usage: REMOVE_PLATE
[gcode_macro REMOVE_PLATE]
description: Remove the active flexplate from array
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== REMOVE_PLATE ====")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {% set array = namespace(output = "") %}
        {% set plates = printer.save_variables.variables.plate_array %}
        {% set act_index = printer.save_variables.variables.plate_index|int %}
        # check if last aray element needs to be deleted
        {% if act_index == (plates|length - 1) %}
            # last element will be deleted
            {% set elem_count = plates|length - 1 %}
        {% else %}
            {% set elem_count = plates|length %}
        {% endif %}
        # check if array contains only one element
        {% if elem_count <= 1%}
            RESPOND MSG="FLEXPLATE: Last Plate can not be deleted. ABORTED"
        {% else %}
            # klipper can not store arrays elements so we need to do a string manipulation
            {% for index in range(elem_count) %}
            {% if index != act_index %}
                {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
                {% set array.output = array.output + element %}
                # add seperator where needed
                {% if index != (elem_count-1) %}
                {% set element = ", " %}
                {% set array.output = array.output + element %}
                {% endif %}
            {% endif %}
            {% endfor %}
            # add array boarders
            {% set array.output = "[%s]"% (array.output) %}
            SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
            SAVE_VARIABLE VARIABLE=plate_index VALUE=0
            _DISPLAY_PLATE TEXT="Set"
            # check if printer is homed
            {% if "xyz" in printer.toolhead.homed_axes %}
            _SET_PLATE_OFFSET
            {% else %}
            RESPOND MSG="Offset will be appied with the next move"
            _SET_PLATE_OFFSET MOVE=0
            {% endif %}
        {% endif %}
    {% endif %}

# change offset of the actual selected plate
# usage: CHANGE_PLATE_OFFSET OFFSET=0.001
[gcode_macro CHANGE_PLATE_OFFSET]
description: Change z-offset of active flexplate
gcode:
    # command params
    {% set offset = params.OFFSET|default(0.0)|float %}
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== CHANGE_PLATE_OFFSET ====")}
        {action_respond_info("offset: '%s'" % (offset))}
        {action_respond_info("===============")}
    {% endif %}

    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {% set array = namespace(output = "") %}
        {% set plates = printer.save_variables.variables.plate_array %}
        {% set elem_count = plates|length %}
        {% set act_index = printer.save_variables.variables.plate_index|int %}
        # klipper can not store arrays elements so we need to do a string manipulation
        {% for index in range(elem_count) %}
            # chech for element to change
            {% if index == act_index %}
            {% set element = "('%s', %s)" % (plates[index][0], offset) %}
            {% else %}
            {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
            {% endif %}
            {% set array.output = array.output + element %}
            # add seperator where needed
            {% if index != (elem_count-1) %}
            {% set element = ", " %}
            {% set array.output = array.output + element %}
            {% endif %}
        {% endfor %}
        # add array boarders
        {% set array.output = "[%s]"% (array.output) %}
        SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
        _DISPLAY_PLATE TEXT="Set"
        # check if printer is homed
        {% if "xyz" in printer.toolhead.homed_axes %}
            _SET_PLATE_OFFSET
        {% else %}
            RESPOND MSG="Offset will be appied with the next move"
            _SET_PLATE_OFFSET MOVE=0
        {% endif %}
    {% endif %}

# change name of the actual selected plate
# usage: CHANGE_PLATE_NAME Name=test
[gcode_macro CHANGE_PLATE_NAME]
description: Change name of active flexplate
gcode:
    # command params
    {% set name = params.NAME|default("New") %}
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== CHANGE_PLATE_NAME ====")}
        {action_respond_info("name: '%s'" % (name))}
        {action_respond_info("===============")}
    {% endif %}

    # set default parameter value
    {% if not printer.save_variables.variables.plate_array %}
        RESPOND MSG="FLEXPLATE: No Plate Array defined, please run _INIT_PLATE_ARRAY"
    {% else %}
        {% set array = namespace(output = "") %}
        {% set plates = printer.save_variables.variables.plate_array %}
        {% set elem_count = plates|length %}
        {% set act_index = printer.save_variables.variables.plate_index|int %}
        # klipper can not store arrays elements so we need to do a string manipulation
        {% for index in range(elem_count) %}
            # chech for element to change
            {% if index == act_index %}
            {% set element = "('%s', %s)" % (name, plates[index][1]) %}
            {% else %}
            {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
            {% endif %}
            {% set array.output = array.output + element %}
            # add seperator where needed
            {% if index != (elem_count-1) %}
            {% set element = ", " %}
            {% set array.output = array.output + element %}
            {% endif %}
        {% endfor %}
        # add array boarders
        {% set array.output = "[%s]"% (array.output) %}
        SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
    {% endif %}
