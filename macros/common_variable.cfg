#######################################
#     Common Variables and Macros     #
#######################################
[gcode_macro TOGGLE_DEBUG]
description: Toggle the macro debug.
gcode:
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    {% if ena_debug == "false" %}
        {action_respond_info("debug is off, turning it on")}
        SAVE_VARIABLE VARIABLE=debug VALUE='"true"'
    {% else %}
        {action_respond_info('debug is on, turning it off')}
        SAVE_VARIABLE VARIABLE=debug VALUE='"false"'
    {% endif %}

# TODO: It would be nice to be able to display detected neopixel, temperature_sensor, filament_switch_sensor, and
# other settings like that by iteration of the config file and parsing of the strings.
[gcode_macro DISPLAY_COMMON_FEATURES]
description: Show all common macro features
gcode:
    # hardware variables
    {% set auto_z_offset = printer["gcode_macro _COMMON_VARIABLE"].auto_z_offset|lower %}
    {% set bed_mesh = printer["gcode_macro _COMMON_VARIABLE"].bed_mesh|lower %}
    {% set bed_screws = printer["gcode_macro _COMMON_VARIABLE"].bed_screws|lower %}
    {% set beeper_pin = printer["gcode_macro _COMMON_VARIABLE"].beeper_pin|lower %}
    {% set case_lights = printer["gcode_macro _COMMON_VARIABLE"].case_lights|lower %}
    {% set chamber_sensor = printer["gcode_macro _COMMON_VARIABLE"].chamber_sensor|lower %}
    {% set display_lights = printer["gcode_macro _COMMON_VARIABLE"].display_lights|lower %}
    {% set encoder_sensor = printer["gcode_macro _COMMON_VARIABLE"].encoder_sensor|lower %}
    {% set ercf = printer["gcode_macro _COMMON_VARIABLE"].ercf|lower %}
    {% set exhaust_fan = printer["gcode_macro _COMMON_VARIABLE"].exhaust_fan|lower %}
    {% set frame_sensor = printer["gcode_macro _COMMON_VARIABLE"].frame_sensor|lower %}
    {% set nevermore_fan = printer["gcode_macro _COMMON_VARIABLE"].nevermore_fan|lower %}
    {% set bed_fans = printer["gcode_macro _COMMON_VARIABLE"].bed_fans|lower %}
    {% set probe_type = printer["gcode_macro _COMMON_VARIABLE"].probe_type|lower %}
    {% set quad_gantry_level = printer["gcode_macro _COMMON_VARIABLE"].quad_gantry_level|lower %}
    {% set runout_sensor = printer["gcode_macro _COMMON_VARIABLE"].runout_sensor|lower %}
    {% set toolhead_sensor = printer["gcode_macro _COMMON_VARIABLE"].toolhead_sensor|lower %}
    {% set z_tilt = printer["gcode_macro _COMMON_VARIABLE"].z_tilt|lower %}
    # Klipper variables
    {% set min_soak_time = printer.save_variables.variables.min_soak_time|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    # {% set b2b_state = printer.save_variables.variables.b2b_state|default("false")|lower %}
    # {% set ena_adaptive_bed_mesh = printer.save_variables.variables.adaptive_bed_mesh|default("false")|lower %}
    {% set ena_beeper = printer.save_variables.variables.beeper|default("true")|lower %}
    # {% set ena_flexplate = printer.save_variables.variables.flexplate|default("false")|lower %}
    {% set ena_nozzle_purge = printer.save_variables.variables.nozzle_purge|default("false")|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info("==== DISPLAY_COMMON_FEATURES ====")}
    {% endif %}

    {action_respond_info("======= Detected Hardware =======")}
    {action_respond_info("auto_z_offset: '%s'" % (auto_z_offset))}
    {action_respond_info("bed_mesh: '%s'" % (bed_mesh))}
    {action_respond_info("bed_screws: '%s'" % (bed_screws))}
    {action_respond_info("beeper_pin: '%s'" % (beeper_pin))}
    {action_respond_info("ercf: '%s'" % (ercf))}
    {action_respond_info("fans: [exhaust: '%s', nevermore: '%s', bed: '%s']" % (exhaust_fan,nevermore_fan,bed_fans))}
    {action_respond_info("filament_motion_sensor: [encoder_sensor: '%s', runout_sensor: '%s']" % (encoder_sensor, runout_sensor))}
    {action_respond_info("filament_switch_sensor: [toolhead_sensor: '%s']" % (toolhead_sensor))}
    {action_respond_info("lights: [case: '%s', display: '%s']" % (case_lights,display_lights))}
    {action_respond_info("probe_type: '%s'" % (probe_type))}
    {action_respond_info("quad_gantry_level: '%s'" % (quad_gantry_level))}
    {action_respond_info("sensors: [chamber: '%s', frame: '%s']" % (chamber_sensor,frame_sensor))}
    {action_respond_info("z_tilt: '%s'" % (z_tilt))}

    {action_respond_info("=========== Variables ============")}
    {action_respond_info("min_soak_time: '%s'" % (min_soak_time))}

    {action_respond_info("=========== Features =============")}
    # {action_respond_info("adaptive_bed_mesh: '%s'" % (ena_adaptive_bed_mesh))}
    # {action_respond_info("b2b_state: '%s'" % (b2b_state))}
    {action_respond_info("beeper: '%s'" % (ena_beeper))}
    {action_respond_info("debug: '%s'" % (ena_debug))}
    # {action_respond_info("flexplate: '%s'" % (ena_flexplate))}
    {action_respond_info('==================================')}

[delayed_gcode INIT_COMMON_VARIABLE]
initial_duration: 0.1
gcode:
    # variables
    {% set neopixel_idle_color = printer["gcode_macro _PRINTER_VARIABLE"].neopixel_idle_color|default("white")|lower %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" %}
        {action_respond_info("==== INIT_COMMON_VARIABLE ====")}
    {% endif %}

    _COMMON_VARIABLE
    DUMP_WARNINGS

[gcode_macro _COMMON_VARIABLE]
description: Helper: Contains common macro variables
variable_auto_z_offset: "none"          # none/flexplate/z_calib depends what is found in cfg
variable_bed_mesh: "false"              # true is bed_mesh is found in cfg
variable_bed_screws: "false"            # true is bed_mesh is found in cfg
variable_beeper_pin: "false"            # true is output_pin beeper is found in cfg
variable_case_lights: "false"           # true is neopixel case_lights found in cfg
variable_chamber_sensor: "false"        # true is temperature_sensor chamber found in cfg
variable_display_lights: "false"        # true is neopixel display_lights found in cfg
variable_encoder_sensor: "false"        # true is encoder_sensor found in cfg
variable_ercf: "false"                  # true is ercf found in config
variable_exhaust_fan: "false"           # true is fan_generic exhaust_fan found in cfg
variable_frame_sensor: "false"          # true is temperature_sensor frame found in cfg
variable_nevermore_fan: "false"         # true is fan_generic nevermore_fan found in cfg
variable_bed_fans: "false"              # true is fan_generic bed_fans found in cfg
variable_probe_type: "unknown"          # unknown/dockable/static what type of probe found in cfg
variable_quad_gantry_level: "false"     # true is quad_gantry_level found in cfg
variable_runout_sensor: "false"         # true is runout_sensor found in cfg
variable_toolhead_sensor: "false"       # true is toolhead_sensor found in cfg
variable_z_tilt: "false"                # true is z_tilt found in cfg
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    ##### DETECT HARDWARE #####
    {% if "z_calibration" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=auto_z_offset VALUE='"z_calib"'
    {% else %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=auto_z_offset VALUE='"flexplate"'
    {% endif %}
    {% if "bed_mesh" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=bed_mesh VALUE='"true"'
    {% endif %}
    {% if "bed_screws" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=bed_screws VALUE='"true"'
    {% endif %}
    {% if "output_pin beeper" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=beeper_pin VALUE='"true"'
    {% endif %}
    {% if "neopixel case_lights" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=case_lights VALUE='"true"'
    {% endif %}
    {% if "temperature_sensor chamber" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=chamber_sensor VALUE='"true"'
    {% endif %}
    {% if "neopixel display_lights" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=display_lights VALUE='"true"'
    {% endif %}
    {% if "ercf" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=ercf VALUE='"true"'
    {% endif %}
    {% if "filament_switch_sensor toolhead_sensor" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=toolhead_sensor VALUE='"true"'
    {% endif %}
    {% if "filament_motion_sensor runout_sensor" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=runout_sensor VALUE='"true"'
    {% endif %}
    {% if "filament_motion_sensor encoder_sensor" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=encoder_sensor VALUE='"true"'
    {% endif %}
    {% if "fan_generic exhaust_fan" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=exhaust_fan VALUE='"true"'
    {% endif %}
     {% if "temperature_sensor frame" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=frame_sensor VALUE='"true"'
    {% endif %}
    {% if "fan_generic nevermore_fan" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=nevermore_fan VALUE='"true"'
    {% endif %}
    {% if "fan_generic bed_fans" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=bed_fans VALUE='"true"'
    {% endif %}
    {% if "dockable_probe" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=probe_type VALUE='"dockable"'
    {% elif "probe" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=probe_type VALUE='"static"'
    {% endif %}
    {% if "quad_gantry_level" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=quad_gantry_level VALUE='"true"'
    {% endif %}
    {% if "z_tilt" in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_COMMON_VARIABLE VARIABLE=z_tilt VALUE='"true"'
    {% endif %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _COMMON_VARIABLE ====")}
        {action_respond_info("auto_z_offset: '%s'" % (auto_z_offset))}
        {action_respond_info("bed_mesh: '%s'" % (bed_mesh))}
        {action_respond_info("bed_screws: '%s'" % (bed_screws))}
        {action_respond_info("beeper_pin: '%s'" % (beeper_pin))}
        {action_respond_info("case_lights: '%s'" % (case_lights))}
        {action_respond_info("chamber_sensor: '%s'" % (chamber_sensor))}
        {action_respond_info("display_lights: '%s'" % (display_lights))}
        {action_respond_info("encoder_sensor: '%s'" % (encoder_sensor))}
        {action_respond_info("ercf: '%s'" % (ercf))}
        {action_respond_info("exhaust_fan: '%s'" % (exhaust_fan))}
        {action_respond_info("frame_sensor: '%s'" % (frame_sensor))}
        {action_respond_info("nevermore_fan: '%s'" % (nevermore_fan))}
        {action_respond_info("bed_fans: '%s'" % (bed_fans))}
        {action_respond_info("probe_type: '%s'" % (probe_type))}
        {action_respond_info("quad_gantry_level: '%s'" % (quad_gantry_level))}
        {action_respond_info("runout_sensor: '%s'" % (runout_sensor))}
        {action_respond_info("toolhead_sensor: '%s'" % (toolhead_sensor))}
        {action_respond_info("z_tilt: '%s'" % (z_tilt))}
        {action_respond_info("==========================")}
    {% endif %}
