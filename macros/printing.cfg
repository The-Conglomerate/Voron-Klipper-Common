###########################
#     Printing Macros     #
###########################
# [gcode_macro TOGGLE_BACK_TO_BACK]
# description: Toggle back to back printing. Rapid prototyping/calibration without the cooldown/soaking.
# gcode:
#     # features
#     {% set b2b_state = printer.save_variables.variables.b2b_state|default("false")|lower %}

#     {% if b2b_state == "false" %}
#         {action_respond_info("back to back printing is off, turning it on")}
#         SAVE_VARIABLE VARIABLE=b2b_state VALUE='"true"'
#     {% else %}
#         {action_respond_info("back to back printing is on, turning it off")}
#         SAVE_VARIABLE VARIABLE=b2b_state VALUE='"false"'
#     {% endif %}

[gcode_macro PRINT_START]
description: Common print start macro
gcode:
    # command params
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_extruder = params.EXTRUDER|default(150)|int %}
    {% set target_chamber = params.CHAMBER|default(0)|int %}
    {% set filament_type = params.FILAMENT|default("")|upper %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set ena_auto_z_offset = printer['gcode_macro _COMMON_VARIABLE'].auto_z_offset|lower %}
    {% set ena_quad_gantry_level = printer['gcode_macro _COMMON_VARIABLE'].quad_gantry_level|lower %}
    {% set ena_bed_mesh = printer['gcode_macro _COMMON_VARIABLE'].bed_mesh|lower %}
    {% set printing_message = printer['gcode_macro _PRINTER_VARIABLE'].printing_message|default(Printing) %}
    {% set unretract_start = printer['gcode_macro _PRINTER_VARIABLE'].extruder.unretract_start|default(9)|int %}
    {% set unretract_speed = printer['gcode_macro _PRINTER_VARIABLE'].extruder.unretract_speed|default(5)|int %}
    {% set filament_array = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array %}
    {% set filament_index = printer.save_variables.variables.filament_index|int %}
    {% set filament_type_loaded = filament_array[filament_index][0] %}
    {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
    {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== PRINT_START =====")}
        {action_respond_info("targets: [bed: '%s', extruder: '%s', chamber: '%s']" % (target_bed,target_extruder,target_chamber))}
        {action_respond_info("features: [auto_z_offset: '%s', quad_gantry_level: '%s']" % (ena_auto_z_offset,ena_quad_gantry_level))}
        {% if printer.bed_mesh %}
            {action_respond_info("bed_mesh: [profile_name: '%s']" % (printer.bed_mesh.profile_name))}
        {% endif %}
        {action_respond_info("filaments: [filament_array: '%s'" % (filament_array))}
        {action_respond_info("filaments: [filament_type: '%s', filament_index: '%s', filament_loaded: '%s'" % (filament_type,saved_filamentindex,filament_type_loaded))}
        {action_respond_info("unretract: [start: '%s', speed: '%s']" % (unretract_start,unretract_speed))}
        {action_respond_info("printing_message: '%s'" % (printing_message))}
        {action_respond_info("===============")}
    {% endif %}

    {% if filament_type|upper == filament_type_loaded|upper %}
        _SET_LED_STATE_BY_NAME STATE="homing"
        RESPOND MSG="Print Start"
        M117 Homing
        G28
        _PREHEAT BED={target_bed} CHAMBER={target_chamber} FILAMENT={filament_type} DEBUG={debug}
        _CALIBRATE DEBUG={debug}
        _SET_LED_STATE_BY_NAME STATE="heating"
        M117 Heating ~bed~{target_bed}~degrees~
        M190 S{target_bed}
        M117 Heating ~extruder~: {target_extruder}~degrees~
        M109 S{target_extruder}
        _SET_LED_STATE_BY_NAME STATE="printing"
        G1 Z5 F5000
        G90
        M83
        G1 E{unretract_start} F{unretract_speed*60}
        G92 E0
        RESPOND MSG="{printing_message}"
        M117 {printing_message}
    {% else %}
        {action_respond_info("===== PRINT_CANCELLED =====")}
        {action_respond_info("Print CANCELLED. You have '%s loaded, but the print asks for: '%s'" % (filament_type_loaded,filament_type))}
        BASE_CANCEL_PRINT
    {% endif %}

[gcode_macro _PREHEAT]
description: Preheat the printer bed/extruder and wait for chamber temps if requested.
gcode:
# TODO: Check if string_filament_types needs to be configurable in printer_variables. OK for testing.
    # command params
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_chamber = params.CHAMBER|default(0)|int %}
    {% set filament_type = params.FILAMENT|default("")|upper %}
    {% set string_filament_types = params.FILAMENT_TYPES|default("ABS,ASA")|upper|replace(" ", "") %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set part_fan_speed = printer["gcode_macro _PRINTER_VARIABLE"].preheat_filtration_cooldown.part_fan_speed|default(1.0)|float %}
    {% set target_extruder_hold = printer['gcode_macro _PRINTER_VARIABLE'].extruder.pause_temp|default(150)|int %}
    {% set preheat_min_soak_time = printer['gcode_macro _PRINTER_VARIABLE'].preheat_filtration_cooldown.preheat_min_soak_time|default(5)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== _PREHEAT ====")}
        {action_respond_info("targets: [bed: '%s', extruder_hold: '%s', chamber: '%s']" % (target_bed,target_extruder_hold,target_chamber))}
        {action_respond_info("filament filter/soak: [filament_type: '%s', filament_types: '%s']" % (filament_type,string_filament_types))}
        {action_respond_info("part_fan_speed: '%s'" % (part_fan_speed))}
        {action_respond_info("preheat_min_soak_time: '%s'" % (preheat_min_soak_time))}
        {action_respond_info("===============")}
    {% endif %}

    _SET_LED_STATE_BY_NAME STATE="heating"
    RESPOND MSG="Preheat Start"
    M117 Preheat Start
    G90
    PARK_BED DEBUG={debug}
    # Chamber/time soak for some filament types
    {% if filament_type in string_filament_types %}
        M106 S{part_fan_speed * 255}
        _CIRCULATION_START FILAMENT={filament_type} DEBUG={debug}
    {% endif %}
    M104 S{target_extruder_hold} # Set extruder to hold temp
    M117 Heating ~bed~{target_bed}~degrees~
    M190 S{target_bed} # Set bed to final temp and wait
    _RUN_BA EVENT=soak_timer TYPE="before" DEBUG={debug}
    {% if printer['temperature_sensor chamber'] and target_chamber > 0 and printer['temperature_sensor chamber'].temperature < target_chamber %}
        M117 Soaking ~chamber~ {target_chamber}~degrees~
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
    {% else %}
        G4 P10
    {% endif %}
    _RUN_BA EVENT=soak_timer TYPE="after" DEBUG={debug}
    _RUN_BA EVENT=timed_soak TYPE="after" DEBUG={debug}
    M107 # Stop part cooling fan

[gcode_macro PRINT_END]
description: Common print end macro.
gcode:
    # command params
    {% set filament_type = params.FILAMENT|default("")|upper %}
    {% set retract_speed = params.RETRACT_SPEED|default(800)|int %}
    {% set cancel = params.CANCEL|default("")|upper %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set pause_retract_distance = printer['gcode_macro _PRINTER_VARIABLE'].extruder.pause_retract_distance|default(3)|int %}
    {% set end_retract_distance = printer['gcode_macro _PRINTER_VARIABLE'].extruder.end_retract_distance|default(10)|int %}
    {% set retract_speed = printer['gcode_macro _PRINTER_VARIABLE'].extruder.retract_speed|default(15)|int %}
    {% set end_retract_speed = printer['gcode_macro _PRINTER_VARIABLE'].extruder.end_retract_speed|default(5)|int %}
    {% set end_retract_speed_flex = printer['gcode_macro _PRINTER_VARIABLE'].extruder.end_retract_speed|default(2)|int %}
    {% set home_print_end = printer['gcode_macro _PRINTER_VARIABLE'].homing.home_print_end|default(X)|upper %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}
    {% set ena_bed_mesh = printer["gcode_macro _COMMON_VARIABLE"].bed_mesh|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== PRINT_END ====")}
        {action_respond_info("cancel: '%s'" % (cancel))}
        {action_respond_info("filament_type: '%s'" % (filament_type))}
        {action_respond_info("home_print_end: '%s'" % (home_print_end))}
        {action_respond_info("retract: [pause: '%smm', end: '%smm', retract: '%smm/s', end_retract: '%smm/s']" % (pause_retract_distance,end_retract_distance,retract_speed,end_retract_speed))}
        {action_respond_info("===============")}
    {% endif %}

    M400
    G91
    G92 E0
    {% if filament_type != FLEX %}
        G1 E-{pause_retract_distance} F{retract_speed*60}
        _PARK_SAFE_END DEBUG={DEBUG}
        G92 E0
        G1 E-{end_retract_distance-pause_retract_distance} F{end_retract_speed*60}
    {% elif filament_type == FLEX %}
        G1 E-{pause_retract_distance} F{end_retract_speed_flex*60}
        _PARK_SAFE_END DEBUG={DEBUG}
        G92 E0
        G1 E-{end_retract_distance-pause_retract_distance} F{end_retract_speed_flex*60}
    {% endif %}
    RESPOND MSG='Ending print'
    TURN_OFF_HEATERS
    M107  # turn off fan
    G90 # absolute positioning
    G28 {home_print_end}
    {% if ena_bed_mesh == "true" %}
        BED_MESH_CLEAR
    {% endif %}
    RESPOND MSG='Print Complete'
    M117 Print complete!
    M84
    _CIRCULATION_END FILAMENT={filament_type} CANCEL={cancel} DEBUG={debug}
    M117
    _ADD_PRINT_TIME DEBUG={debug}
    _SD_PRINT_STATS R="done" DEBUG={debug}
    _SD_PRINTER_STATS DEBUG={debug}
    _SET_LED_STATE_BY_NAME STATE="on"

[gcode_macro CANCEL_PRINT]
description: Common cancel print macro.
rename_existing: BASE_CANCEL_PRINT
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default('false')|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== CANCEL_PRINT ====")}
    {% endif %}

    RESPOND MSG="Canceling Print"
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END DEBUG={debug} CANCEL=CANCEL
    BASE_CANCEL_PRINT
