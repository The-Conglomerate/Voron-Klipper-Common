#####################################################################
#       Resources / Documentation
#####################################################################
# Default menu: https://github.com/Klipper3d/klipper/blob/master/klippy/extras/display/menu.cfg
# Documentation: https://www.klipper3d.org/Config_Reference.html#menu
### This MENU ###
# Main
#   +Tune
#       + Speed %
#       + Flow %
#       + Z Offset:
#       + Cancel Print
#       + Pause Print
#       + Resume Print
#       + M600
#       + Set B2B: true/false
#   + Control
#       + Steppers off
#       + Park: Front/FrontLow/Center/Rear/Bed
#       + Home: All/Z/X&Y
#       + QGL
#       + Fan speed: 0%
#       + Nevermore: 0%
#       + Exhaust fan: 0%
#       + Move 1mm
#   + Temperature
#       + Ext:
#       + Bed:
#       + Turn off all
#   + Filament
#       + Load: ABS/ASA/FLEX/NYLON/PC/PET/PLA
#       + Unload filament
#   + Setup
#       + Calibration
#           + BedScrewsAdjust
#           + Send: ADJUSTED/ACCEPT
#           + PID tune: Hotend/Bed
#       + Leds: OFF/Blue/Green/Orange/Purple/Red/White/Yellow
#       + Save config
#       + Restart
#           + Restart host
#           + Restart FW
#   + Files
#       + File: <>
#       + Load file
#       + Unload file
#       + Start print
#####################################################################
#       Set this menu as default
#####################################################################
[display]
menu_root: __voron
#####################################################################
#       Main
#####################################################################
[menu __voron]
type: list
name: Main
#####################################################################
#       Tune
#####################################################################
[menu __voron __tune]
type: list
name: Tune
enable: {(printer.print_stats.state == "paused") or (printer.idle_timeout.state == "Printing")}
[menu __voron __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}
[menu __voron __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}
[menu __voron __tune __offsetz]
type: input
name: Z Offset:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1
[menu __voron __tune __cancel]
type: command
name: Cancel Print
enable: {printer.idle_timeout.state == "Printing"}
gcode:
    CANCEL_PRINT
    {menu.exit(update)}
[menu __voron __tune __pause]
type: command
name: Pause  Print
enable: {printer.print_stats.state == "printing"}
gcode:
    PAUSE
    {menu.exit(update)}
[menu __voron __tune __resume]
type: command
name: Resume Print
enable: {printer.print_stats.state == "paused"}
gcode:
    RESUME
    {menu.exit(update)}
[menu __voron __tune __M600]
type: command
name: Colorchange(M600)
enable: {printer.print_stats.state == "printing"}
gcode:
    M600
    {menu.exit(update)}
[menu __voron __tune __set_b2b]
type: input
enable: {'gcode_macro TOGGLE_BACK_TO_BACK' in printer}
name: Set B2B: {['true','false'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(True)}
        {% if menu.input|int == 0 %}
            SAVE_VARIABLE VARIABLE=b2b_state VALUE='"true"'
        {% elif menu.input|int == 1 %}
            SAVE_VARIABLE VARIABLE=b2b_state VALUE='"false"'
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.back(true)}
    {%- endif -%}
#####################################################################
#       Control
#####################################################################
[menu __voron __control]
type: list
name: Control
[menu __voron __control __disable]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Steppers off
gcode:
    M84
    M18
[menu __voron __control __park_pos]
type: input
enable: {('gcode_macro PARK_FRONT' in printer) and (not printer.idle_timeout.state == "Printing")}
name: Park: {['Bed','Center','Rear','Front','FrontMid','FrontLow'][menu.input|int]}
input: 0
input_min: 0
input_max: 5
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(True)}
        {% if menu.input|int == 0 %}
            PARK_BED
        {% elif menu.input|int == 1 %}
            PARK_CENTER
        {% elif menu.input|int == 2 %}
            PARK_REAR
        {% elif menu.input|int == 3 %}
            PARK_FRONT
        {% elif menu.input|int == 4 %}
            PARK_FRONT_MID            
        {% elif menu.input|int == 5 %}
            PARK_FRONT_LOW
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.back(true)}
    {%- endif -%}
[menu __voron __control __home]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Home: {['All','Z','X/Y'][menu.input|int]}
input: 0
input_min: 0
input_max: 2
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(True)}
        {% if menu.input|int == 0 %}
            G28
        {% elif menu.input|int == 1 %}
            G28 Z
        {% elif menu.input|int == 2 %}
            G28 X Y
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.back(true)}
    {%- endif -%}
[menu __voron __control __QGL]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('quad_gantry_level' in printer)}
name: QGL
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
[menu __voron __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    M106 S{'%d' % (menu.input*255)}
[menu __voron __control __nevermorespeed]
type: input
enable: {'fan_generic nevermore_fan' in printer}
name: Nevermore: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic nevermore_fan'].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=nevermore_fan SPEED={menu.input}
[menu __voron __control __exhaustspeed]
type: input
enable: {'fan_generic exhaust_fan' in printer}
name: Exhaust:   {'%3d' % (menu.input*100)}%
input: {printer['fan_generic exhaust_fan'].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED={menu.input}
[menu __voron __control __encoderonoff]
type: input
enable: {'filament_motion_sensor encoder_sensor' in printer.configfile.settings}
name: Encoder: {'ON ' if menu.input else 'OFF'}
input: 1
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE={menu.input|int}

[menu __voron __control __toolheadonoff]
type: input
enable: {'filament_motion_sensor runout_sensor' in printer.configfile.settings}
name: Runout: {'ON ' if menu.input else 'OFF'}
input: 1
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
    SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE={menu.input|int}

[menu __voron __control __runoutonoff]
type: input
enable: {'filament_switch_sensor toolhead_sensor' in printer.configfile.settings}
name: Toolhead: {'ON ' if menu.input else 'OFF'}
input: 1
input_min: 0
input_max: 1
input_step: 1
index: 4
gcode:
    SET_FILAMENT_SENSOR SENSOR=toolhead_sensor ENABLE={menu.input|int}
[menu __voron __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm
[menu __voron __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis
[menu __voron __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis
[menu __voron __control __move_1mm __axis_z]
type: input
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis
[menu __voron __control __move_1mm __axis_e]
type: input
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis
#####################################################################
#       Temperature
#####################################################################
[menu __voron __temp]
type: list
name: Temperature
[menu __voron __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ext:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 5
gcode: M104 T0 S{'%.0f' % menu.input}
[menu __voron __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 5
gcode: M140 S{'%.0f' % menu.input}
[menu __voron __temp __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Turn off all
gcode:
    M104 S0
    M140 S0
    {menu.exit(update)}

#####################################################################
#       Filament
#####################################################################
[menu __voron __filament]
type: list
name: Filament
enable: {((('gcode_macro UNLOAD_FILAMENT' in printer) and (printer.print_stats.state == "paused")) or ('gcode_macro UNLOAD_FILAMENT' in printer) and (not printer.idle_timeout.state == "Printing"))}
[menu __voron __filament __load]
type: input
enable: {'gcode_macro LOAD_FILAMENT' in printer}
index: 0
name: Load: {['ABS','ASA','FLEX','NYLON','PC','PET','PLA'][menu.input|int]}
input: 0
input_min: 0
input_max: 6
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(True)}
        {%- if menu.input|int == 0 -%}
            LOAD_FILAMENT FILAMENT=ABS
        {%- elif menu.input|int == 1 -%}
            LOAD_FILAMENT FILAMENT=ASA
        {%- elif menu.input|int == 2 -%}
            LOAD_FILAMENT FILAMENT=FLEX
        {%- elif menu.input|int == 3  -%}
            LOAD_FILAMENT FILAMENT=NYLON
        {%- elif menu.input|int == 4  -%}
            LOAD_FILAMENT FILAMENT=PC
        {%- elif menu.input|int == 5  -%}
            LOAD_FILAMENT FILAMENT=PET
        {%- elif menu.input|int == 6  -%}
            LOAD_FILAMENT FILAMENT=PLA
        {%- endif -%}
    {%- elif menu.event == 'long_click' -%}
        {menu.back(true)}
    {%- endif -%}
[menu __voron __filament __unload]
type: command
name: Unload
enable: {'gcode_macro UNLOAD_FILAMENT' in printer}
gcode:
    UNLOAD_FILAMENT
    {menu.exit(update)}
#####################################################################
#       Setup
#####################################################################
[menu __voron __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup
[menu __voron __setup __calibration]
type: list
name: Calibration
[menu __voron __setup __calibration __pid_tuning]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: PID Tune:{['Hotend','Bed'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(true)}
        {% if menu.input|int == 0 %}
            PID_CALIBRATE HEATER=extruder TARGET=250 WRITE_FILE=1
        {% elif menu.input|int == 1 %}
            PID_CALIBRATE HEATER=heater_bed TARGET=115 WRITE_FILE=1
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.exit(true)}
    {%- endif -%}
[menu __voron __setup __calibration __bed_screws_adjust]
type: command
name: BedScrewsAdjust
enable: {printer['gcode_macro _COMMON_VARIABLE'].bed_screws == "true"}
gcode:
    {% if homed_axes != "xyz" %}
        G90
        G28
    {% endif %}
    BED_SCREWS_ADJUST
[menu __voron __setup __calibration __adjusted_accept]
type: input
enable: {printer['gcode_macro _COMMON_VARIABLE'].bed_screws == "true"}
name: Send: {['Adjusted','Accept'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {% if menu.input|int == 0 %}
            ADJUSTED
        {% elif menu.input|int == 1 %}
            ACCEPT
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.exit(true)}
    {%- endif -%}
#[menu __voron __setup __change_lights]
# TODO: Update to new commands
#type: input
#name: Leds: {['OFF','Blue','Green','Orange','Purple','Red','White','Yellow'][menu.input|int]}
#enable: {'neopixel case_lights' in printer}
#input: 0
#input_min: 0
#input_max: 7
#gcode:
#    {%- if menu.event != 'long_click' -%}
#        {menu.exit(True)}
#        {% if menu.input|int == 0 %}
#            LED_OFF
#        {% elif menu.input|int == 1 %}
#            BLUE
#        {% elif menu.input|int == 2 %}
#            GREEN
#        {% elif menu.input|int == 3 %}
#            ORANGE
#        {% elif menu.input|int == 4 %}
#            PURPLE
#        {% elif menu.input|int == 5 %}
#            RED
#        {% elif menu.input|int == 6 %}
#            WHITE
#        {% elif menu.input|int == 7 %}
#            YELLOW
#        {% endif %}
#    {%- elif menu.event == 'long_click' -%}
#        {menu.back(true)}
#    {%- endif -%}
[menu __voron __setup __save_config]
type: command
name: Save config
gcode:
    SAVE_CONFIG
    {menu.exit(update)}
[menu __voron __setup __restart]
type: list
name: Restart
[menu __voron __setup __restart __host_restart]
type: command
name: Restart host
gcode: RESTART
[menu __voron __setup __restart __firmware_restart]
type: command
name: Restart FW
gcode: FIRMWARE_RESTART
[menu __voron __setup __shutdown]
type: command
name: Shutdown
gcode:
    {menu.exit()}
    M117 Shutting down
    {% if 'neopixel case_lights' in printer %}
        LED_OFF
    {% endif %}
    {action_respond_info("Shutting down")}
    UPDATE_DELAYED_GCODE ID=_menu_pi_shutdown DURATION=3
#####################################################################
#       Files
# source: https://github.com/McPrince96/Voron-v2.4/blob/main/Config%20files/webclient.cfg
#####################################################################
[menu __voron __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: Files

[menu __voron __sdcard __file]
type: command
name: File: {printer.print_stats.filename}
index: 0

[menu __voron __sdcard __load]
type: vsdlist
#type: list
#event_sender: __vsdfiles
enable: {not printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Load file
index: 1

[menu __voron __sdcard __unload]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Unload file
index: 2
gcode:
  {menu.back()}
  SDCARD_RESET_FILE

[menu __voron __sdcard __start]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Start print
index: 3
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  M24
#####################################################################
#       Pi shutdown script
# source: https://github.com/richardjm/voronpi-klipper-backup/blob/master/config.d/menu_tweaks.cfg
#####################################################################
[delayed_gcode _menu_pi_shutdown]
gcode:
    {action_emergency_stop("Shutdown from menu")}
    {action_call_remote_method("shutdown_machine")}
